use crate::{api, error::log_error, LobbyInfo, StartGameRequest};
use leptos::ev;
use leptos::prelude::*;
use wasm_bindgen_futures::spawn_local;

#[component]
pub fn PreGameLobby<F, G>(
    lobby_id: String,
    player_id: String,
    on_game_start: F,
    on_leave_lobby: G,
) -> impl IntoView
where
    F: Fn() + 'static + Copy,
    G: Fn() + 'static + Copy,
{
    let (lobby_info, set_lobby_info) = signal::<Option<LobbyInfo>>(None);
    let (is_starting, set_is_starting) = signal(false);
    let (error_message, set_error_message) = signal(String::new());

    // Create a signal for lobby polling
    let (poll_active, set_poll_active) = signal(true);

    // Polling effect
    Effect::new(move |_| {
        if poll_active.get() {
            let lobby_id = lobby_id.clone();
            spawn_local(async move {
                loop {
                    // Poll every 2 seconds
                    gloo_timers::future::TimeoutFuture::new(2000).await;

                    if !poll_active.get() {
                        break;
                    }

                    match api::get_lobby_info(&lobby_id).await {
                        Ok(info) => {
                            // Check if game has started
                            if matches!(info.status, crate::GameStatus::Playing) {
                                set_poll_active.set(false);
                                on_game_start();
                                return;
                            }
                            set_lobby_info.set(Some(info));
                        }
                        Err(e) => {
                            log_error("Failed to fetch lobby info", &e);
                            set_error_message.set("Failed to fetch lobby info".to_string());
                        }
                    }
                }
            });
        }
    });

    // Initial fetch
    let lobby_id_clone = lobby_id.clone();
    spawn_local(async move {
        match api::get_lobby_info(&lobby_id_clone).await {
            Ok(info) => {
                set_lobby_info.set(Some(info));
            }
            Err(e) => {
                log_error("Failed to fetch initial lobby info", &e);
                set_error_message.set("Failed to fetch lobby info".to_string());
            }
        }
    });

    let start_game = move |_: ev::MouseEvent| {
        let lobby_id = lobby_id.clone();
        let player_id = player_id.clone();

        spawn_local(async move {
            set_is_starting.set(true);
            set_error_message.set(String::new());

            let request = StartGameRequest { player_id };

            match api::start_game(&lobby_id, request).await {
                Ok(_) => {
                    // Game started successfully - polling will detect the state change
                }
                Err(e) => {
                    log_error("Failed to start game", &e);
                    set_error_message.set("Failed to start game".to_string());
                }
            }
            set_is_starting.set(false);
        });
    };

    let leave_lobby = move |_: ev::MouseEvent| {
        set_poll_active.set(false);
        on_leave_lobby();
    };

    // Compute derived values
    let is_leader = move || {
        lobby_info
            .get()
            .map(|info| info.leader_id == player_id)
            .unwrap_or(false)
    };

    let player_count = move || lobby_info.get().map(|info| info.players.len()).unwrap_or(0);

    let (copy_feedback, set_copy_feedback) = signal(String::new());

    let copy_lobby_id = move |_: ev::MouseEvent| {
        let lobby_id = lobby_id.clone();
        spawn_local(async move {
            let window = web_sys::window().expect("global window");
            let navigator = window.navigator();
            let clipboard = navigator.clipboard();
            match wasm_bindgen_futures::JsFuture::from(clipboard.write_text(&lobby_id)).await {
                Ok(_) => {
                    set_copy_feedback.set("Copied!".to_string());
                    // Clear the feedback after 2 seconds
                    spawn_local(async move {
                        gloo_timers::future::TimeoutFuture::new(2000).await;
                        set_copy_feedback.set(String::new());
                    });
                }
                Err(_) => {
                    set_copy_feedback.set("Copy failed".to_string());
                }
            }
        });
    };

    view! {
        <div class="pregame-lobby">
            <div class="lobby-header">
                <h2>"Lobby: " <span class="lobby-id">{lobby_id.clone()}</span></h2>
                <button
                    on:click=copy_lobby_id
                    class="copy-btn"
                    title="Copy Lobby ID"
                >
                    {move || if copy_feedback.get().is_empty() { "ðŸ“‹" } else { &copy_feedback.get() }}
                </button>
            </div>

            <Show
                when=move || lobby_info.get().is_some()
                fallback=|| view! { <div class="loading">"Loading lobby info..."</div> }
            >
                {move || {
                    lobby_info.get().map(|info| {
                        let max_players = info.settings.max_players;
                        let leader_id = info.leader_id.clone();

                        view! {
                            <div class="lobby-content">
                                <div class="players-section">
                                    <h3>"Players (" {player_count()} "/" {max_players} ")"</h3>
                                    <ul class="players-list">
                                        {info.players.into_iter().map(|player| {
                                            let is_current = player.id == player_id;
                                            let is_leader = player.id == leader_id;
                                            view! {
                                                <li class="player-item" class:current-player=is_current>
                                                    <span class="player-name">{player.name}</span>
                                                    <Show when=move || is_leader>
                                                        <span class="leader-badge">"ðŸ‘‘"</span>
                                                    </Show>
                                                    <Show when=move || is_current>
                                                        <span class="you-badge">"(You)"</span>
                                                    </Show>
                                                </li>
                                            }
                                        }).collect_view()}
                                    </ul>
                                </div>

                                <div class="settings-section">
                                    <h3>"Game Settings"</h3>
                                    <div class="settings-display">
                                        <p>"Difficulty Levels: " {info.settings.difficulty_levels.join(", ")}</p>
                                        <p>"Time Limit: " {
                                            info.settings.time_limit_seconds
                                                .map(|t| format!("{} seconds", t))
                                                .unwrap_or_else(|| "None".to_string())
                                        }</p>
                                    </div>
                                </div>

                                <div class="lobby-actions">
                                    <Show
                                        when=is_leader
                                        fallback=|| view! {
                                            <p class="waiting-message">"Waiting for leader to start the game..."</p>
                                        }
                                    >
                                        <button
                                            on:click=start_game
                                            class="start-game-btn"
                                            disabled=move || is_starting.get() || player_count() < 2
                                        >
                                            {move || if is_starting.get() { "Starting..." } else { "Start Game" }}
                                        </button>
                                        <Show when=move || player_count() < 2>
                                            <p class="warning">"Need at least 2 players to start"</p>
                                        </Show>
                                    </Show>

                                    <button
                                        on:click=leave_lobby
                                        class="leave-lobby-btn"
                                    >
                                        "Leave Lobby"
                                    </button>
                                </div>

                                <Show when=move || !error_message.get().is_empty()>
                                    <div class="error-message">
                                        {move || error_message.get()}
                                    </div>
                                </Show>
                            </div>
                        }
                    })
                }}
            </Show>
        </div>
    }
}
